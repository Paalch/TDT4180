package application;

import java.util.ArrayList;
import java.util.Arrays;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.Spinner;
import javafx.scene.control.SpinnerValueFactory;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.stage.Stage;


public class AppointmentController extends Application {
	
	private Appointment appointment = new Appointment(); 
	SpinnerValueFactory.IntegerSpinnerValueFactory minutt1 = new SpinnerValueFactory.IntegerSpinnerValueFactory(0,45,0,-15);
	SpinnerValueFactory.IntegerSpinnerValueFactory minutt2 = new SpinnerValueFactory.IntegerSpinnerValueFactory(0,45,0,-15);
	
	SpinnerValueFactory.IntegerSpinnerValueFactory time1 = new SpinnerValueFactory.IntegerSpinnerValueFactory(0,24,0,-1);
	SpinnerValueFactory.IntegerSpinnerValueFactory time2 = new SpinnerValueFactory.IntegerSpinnerValueFactory(0,24,0,-1);
	
	@FXML
	CheckBox cbRepeat;
	@FXML
	Pane repeatPane; 
	@FXML
	GridPane mainGrid; 
	@FXML
	Button btMake; 
	@FXML
	TextArea formal; 
	@FXML
	Label errorFormal; 
	@FXML
	ComboBox<Building> cbbygg; 
	@FXML 
	ComboBox<String> cbRomNr;
	@FXML
	Spinner<Integer> sp1; 
	@FXML
	Spinner<Integer> sp2; 
	@FXML
	Spinner<Integer> sp3; 
	@FXML
	Spinner<Integer> sp4; 
	@FXML
	DatePicker fromDate; 
	@FXML
	Label errorbygg; 
	@FXML
	Label errordato; 
	@FXML 
	Label errorkl;
	
	
	@Override
	public void start(Stage primaryStage) {
		try {
			Scene scene = new Scene(FXMLLoader.load(getClass().getResource("Appointment.fxml")),500,650);
			scene.getStylesheets().add(getClass().getResource("application.css").toExternalForm());
			primaryStage.setScene(scene);
			primaryStage.show();
			
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public void initialize() {
		ObservableList<Building> buildings = FXCollections.observableArrayList();  
		buildings.add(new Building("Realfagsbygget",new ArrayList<String>(Arrays.asList("1","2"))));
		buildings.add(new Building("Hovedbygget",new ArrayList<String>(Arrays.asList("3","4"))));
		buildings.add(new Building("P15",new ArrayList<String>(Arrays.asList("5","6"))));
		setsetRomnrs(); 
		cbbygg.setItems(buildings);
		cbbygg.setValue(cbbygg.getItems().get(0)); 

		
		sp2.setEditable(true);
		sp2.setValueFactory(minutt1);
		sp4.setEditable(true);
		sp4.setValueFactory(minutt2);
		
		
		sp1.setEditable(true);
		sp1.setValueFactory(time2);
		sp3.setEditable(true);
		sp3.setValueFactory(time1);
		
	}
	
	public static void main(String[] args) {
		launch(args);
	}
	
	
	@FXML
	private void repeat(ActionEvent event) {
	     if(cbRepeat.isSelected()) {
	    	 makeVisible(true);
	     }
	     else {
	    	 makeVisible(false);
	     }
	 } 
	@FXML
	private void setRomnrs(ActionEvent event){
		ObservableList<String> rooms = FXCollections.observableArrayList(cbbygg.getValue().getRooms());
		cbRomNr.setItems(rooms);
		cbRomNr.setValue(cbRomNr.getItems().get(0)); 
	}
	
	 @FXML
	private void make(ActionEvent event){
		 if(formal.getText().equals("") || cbbygg.getValue().equals("") || cbRomNr.equals("") || time1.getValue() <= time2.getValue()) {
			 errorFormal.setVisible(false);
			 errorbygg.setVisible(false); 
			 errorkl.setVisible(false);
			 
			 if(formal.getText().equals("")){
				 errorFormal.setVisible(true);
			 }
			 if(cbbygg.getValue().equals("") || cbRomNr.equals("")){
				 errorbygg.setVisible(true); 
			 }
			 if(time1.getValue() < time2.getValue()){
				 errorkl.setVisible(true);
			 }
		 }
		 else {
		 appointment.setFormal(formal.getText());
		 Stage stage = (Stage) btMake.getScene().getWindow();
		 stage.close();
		 }
	 }
	private void makeVisible(boolean visible){
		if(visible){
			repeatPane.setVisible(true);
			mainGrid.getRowConstraints().get(3).setMaxHeight(100);
			mainGrid.getRowConstraints().get(4).setPrefHeight(0);
			mainGrid.getRowConstraints().get(4).setMaxHeight(0);
			mainGrid.getRowConstraints().get(4).setMinHeight(0);
		}
		else{
			repeatPane.setVisible(false);
			mainGrid.getRowConstraints().get(3).setMaxHeight(0);
			mainGrid.getRowConstraints().get(4).setPrefHeight(160);
			mainGrid.getRowConstraints().get(4).setMaxHeight(160);
			mainGrid.getRowConstraints().get(4).setMinHeight(160);
		}
	}
}
